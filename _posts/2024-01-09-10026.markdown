---
title:  "10026번: 적록색약"
excerpt: "백준 10026번"
last_modified_at: 2024-01-09
categories:
  - BJ
tags:
  - PS
  - BJ
---
# 문제
적록색약은 빨간색과 초록색의 차이를 거의 느끼지 못한다. 따라서, 적록색약인 사람이 보는 그림은 아닌 사람이 보는 그림과는 좀 다를 수 있다.

크기가 N×N인 그리드의 각 칸에 R(빨강), G(초록), B(파랑) 중 하나를 색칠한 그림이 있다. 그림은 몇 개의 구역으로 나뉘어져 있는데, 구역은 같은 색으로 이루어져 있다. 또, 같은 색상이 상하좌우로 인접해 있는 경우에 두 글자는 같은 구역에 속한다. (색상의 차이를 거의 느끼지 못하는 경우도 같은 색상이라 한다)

예를 들어, 그림이 아래와 같은 경우에
```
RRRBB
GGBBB
BBBRR
BBRRR
RRRRR
```
적록색약이 아닌 사람이 봤을 때 구역의 수는 총 4개이다. (빨강 2, 파랑 1, 초록 1) 하지만, 적록색약인 사람은 구역을 3개 볼 수 있다. (빨강-초록 2, 파랑 1)

그림이 입력으로 주어졌을 때, 적록색약인 사람이 봤을 때와 아닌 사람이 봤을 때 구역의 수를 구하는 프로그램을 작성하시오.
# 입력
첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100)

둘째 줄부터 N개 줄에는 그림이 주어진다.
# 출력
적록색약이 아닌 사람이 봤을 때의 구역의 개수와 적록색약인 사람이 봤을 때의 구역의 수를 공백으로 구분해 출력한다.
## 예제
### 입력
```
5
RRRBB
GGBBB
BBBRR
BBRRR
RRRRR
```
### 출력
```
4 3
```

# 풀이
배열을 순회하면서 상하좌우에 있는 색이 자신과 같을 경우에만 탐색하고, 더 이상 탐색할 공간이 없을 경우 구역의 수를 1 증가시키는 과정을 반복한다. DFS나 BFS 중 어느 쪽을 사용해도 좋지만, 이번에는 DFS를 이용해 해결한다.

이 때 적록색약인 경우를 체크하기 위해, 입력에서 'G'가 들어올 경우 'R'로 바꾸어 만든 배열 한 개를 추가로 만들고 그 배열에서도 그래프 탐색 알고리즘을 시행한다.

(* 이 문제는 재귀가 깊게 들어가기 때문에 파이썬 사용 시 sys.setrecursionlimit(10 ** 6)를 삽입해야 한다.)
# 코드


```python
import sys
sys.setrecursionlimit(10 ** 6)

dx=[0, 0, 1, -1]
dy=[1, -1, 0, 0]
N=int(input())

picture=[[0 for i in range(N)] for j in range(N)]
rg=[[0 for i in range(N)] for j in range(N)]

for i in range(N):
  line=list(str(input()))
  for j in range(N):
    picture[i][j]=line[j]
    rg[i][j]=line[j]
    if line[j]=='G':
      rg[i][j]='R'
      
def dfs(y, x, graph, visited):
  visited[y][x]=1
  for i in range(4):
    if y+dy[i]>=0 and y+dy[i]<N and x+dx[i]>=0 and x+dx[i]<N:
      if graph[y+dy[i]][x+dx[i]]==graph[y][x] and visited[y+dy[i]][x+dx[i]]==0:
        dfs(y+dy[i], x+dx[i], graph, visited)
  return

visited1=[[0 for i in range(N)] for j in range(N)]
visited2=[[0 for i in range(N)] for j in range(N)]
ret_normal=0
ret_rg=0

# 2가지 경우의 수를 한 개의 반복문으로 해결
for i in range(N):
  for j in range(N):
    if visited1[i][j]==0:
      dfs(i, j, picture, visited1)
      ret_normal+=1
    if visited2[i][j]==0:
      dfs(i, j, rg, visited2)
      ret_rg+=1

print(ret_normal, ret_rg)
```


# 링크
<https://www.acmicpc.net/problem/10026>