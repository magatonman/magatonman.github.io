---
title:  "Numpy 사용법 정리"
excerpt: "Numpy"
last_modified_at: 2024-02-01
categories:
  - Python
tags:
  - Python
---
# 사용법
```python
import numpy as np
```

# 배열 생성
```python
a=np.array([1, 2, 3])
```
![np_array](https://github.com/magatonman/magatonman.github.io/assets/47918242/7db87280-73e3-4f66-85a6-622b08553b33)
위의 명령어는 1차원배열을 만드는 형태이며, 시각적으로 나타내면 이하와 같다.
## zeros
모든 원소가 0인 1차원배열을 생성한다.
```python
np.zeros(2)
np.array([0., 0.])
```
위 두 명령어가 생성하는 배열은 동일한 형태이다.

## ones
zeros가 모든 원소가 0인 배열을 만들었다면 ones는 모든 원소가 1인 배열을 생성한다.
```python
np.ones(2)
np.array([1., 1.])
```
역시 위 두 명령어의 실행 결과도 동일하다.

## empty
특정 크기의 배열을 생성한다. 내부 값을 초기화하지는 않는다.
```python
np.empty(2)
```
이 경우 임의의 값이 2개 들어간 1차원배열이 생성된다.

## arange
등차수열을 생성한다. arrange(p, q, r)의 경우 p 이상 q 미만이고 공차가 r인 등차수열로 이루어진 배열을 생성한다.
```python
np.arange(2, 9, 2)
array([2, 4, 6, 8])
```
2 이상 9 미만인 짝수는 2, 4, 6, 8이므로 이상의 결과가 나온다.

## linspace
arange와 유사하나 공차가 아닌 원소의 수를 기준으로 삼는다.
```python
np.linspace(0, 10, num=5)
array([0., 2.5, 5., 7.5, 10.])
```

# 배열 정리
## sort
```python
np.sort(arr)
```
배열을 정렬하는 함수로, 원본 배열을 변형하지는 않는다.

 * ```argsort```: 
 * ```lexsort```: 
### searchsorted

 * ```partition```:

## concatenate
배열을 합치는 함수.

# 크기 확인
## ndim
배열의 차원이 몇 차원인지를 알려 주는 함수.

## size
배열의 원소의 개수가 몇 개인지를 알려 주는 함수.

## shape
각 차원별로 길이가 얼마인지를 알려 주는 함수.

# 1차원 배열 2차원으로 변환
## np.newaxis
차원을 하나 추가한다.
```python
a=np.array([1, 2, 3, 4, 5 ,6])
```
이 배열은 1차원 배열이지만, np.newaxis를 사용해 2차원 배열로 확장이 가능하다.
### 행벡터 만들기
```python
a2=a[np.newaxis, :]
```
이 경우 열벡터의 형태로 완성되며, a2는 이하와 같은 형태가 된다.
```python
[[1, 2, 3, 4, 5, 6]]
```
### 열벡터 만들기
```python
a3=a[:, np.newaxis]
```
이 경우 행벡터의 형태가 되며, a3은 이하와 같은 형태가 된다.
```python
[[1],
[2],
[3],
[4],
[5],
[6]]
```
## np.expand_dims
np.newaxis와 유사하나 축을 어디에 추가할지 선언하는 방식으로 실행한다.
```python
b=np.expand_dims(a, axis=1)
c=np.expand_dims(a, axis=0)
```
이 경우 b는 a2, c는 a3과 같은 결과가 나온다.

# 배열 자르기
일반적인 경우 numpy를 사용하지 않을 경우와 동일하지만, 조건문을 사용하는 것으로 일부 원소만 추출하는 것도 가능하다.
```python
a=[1, 2, 3, 4, 5, 6]
print(a[a < 5])
```
이 경우 ```[1, 2, 3, 4]```가 출력된다.

## np.nonzero
배열에서 특정 조건을 만족하면서 0이 아닌 원소의 위치를 찾아 주는 함수이다.
```python
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
b=np.nonzero(a < 5)
```
이 경우 결과는 ```(array([0, 0, 0, 0]), array([0, 1, 2, 3]))```로 나오는데, 이는 좌표 ```(0, 0), (0, 1), (0, 2), (0, 3)```에 조건을 만족하면서 0이 아닌 수가 있다는 뜻이다.


# 전치행렬
일반적으로 배열 뒤에 T를 붙여 생성할 수 있다.
```python
data=[[1, 2], [3, 4], [5, 6]]
```
일 경우, ```data.T```는
```python
data.T=[[1, 3, 5], [2, 4, 6]]
```
이 된다.
![np_transposing_reshaping](https://github.com/magatonman/magatonman.github.io/assets/47918242/972a41d0-44e8-4a29-9acc-b4e5ec21a6fb)

혹은 원하는 형태로 차원을 선언하는 것으로 좀 더 복잡한 형태로 배열을 수정할 수도 있다.
```python
data=[1, 2, 3, 4, 5, 6]
data.reshape(2, 3)
data.reshape(3, 2)
```
이 경우 각각
```python
[[1, 2, 3],
[4, 5, 6]]
```
```python
[[1, 2],
[3, 4],
[5, 6]]
```
로 변화한다. 
![np_reshape](https://github.com/magatonman/magatonman.github.io/assets/47918242/17327376-ed62-4696-9504-5f44183711f1)

# 행렬 뒤집기
```np.flip```을 이용한다.
```python
arr=np.array([1, 2, 3, 4, 5, 6, 7, 8])
np.flip(arr)
```
예측대로 결과는 ```[8, 7, 6, 5, 4, 3, 2, 1]```이 된다.

2차원배열의 경우는 좀 복잡한데, 뒤집을 축을 선언해야 한다. 선언하지 않는다면, 행과 열을 전부 뒤집는다.
```python
arr_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
np.flip(arr_2d)

```